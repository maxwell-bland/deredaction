#!/usr/bin/env bash
# Generate Target Info
#
# Generates a targets for line reconstruction for a given PDF
# Arg 1 is the PDF, then input to the script is the text on the line
# with the redaction.
# output will be the target info for width-matching and
# the text of the line for purposes of injection.
#
# Note: just wrap the last line in a while true to support getting multiple
# targets for a given pdf
DIR=$(dirname $(realpath ${BASH_SOURCE[0]}))/..
source "$DIR"/parsing/misc

# Gets the bounding boxes for a line of text
get-bbx () (
    read l
    l=$(echo "$l" | tr -s ' ' ' ')
    "$DIR"/parsing/cl $1 | tr -s ' ' ' ' | grep "$l" |
        while read pg y line; do
            yrnd=$(echo "print(int($y * 10000) / 10000)" | python3)
            $DIR/c-src/core/get-states $1 |
                sed -n "/PAGEBREAK $pg/,/PAGEBREAK $((pg + 1))/{//b;p}" |
                grep "y: $y\|$yrnd" 
            echo $y
            echo $pg
        done
)

# Remove adjustments from our string for formatting guesses.
# After reading in the guess, it will be passed to ms-tj
# or some other adjustment-adding script, and then will either
# have noise accounted for by width-match or not...
# but we don't care about the original adjustments
create-format-string () (
    remove-adjs |
        {
            read pre
            read suf
            fmt="${pre%]}""{}""${suf#[}"
            fmt="${fmt#[}"
            fmt="${fmt%]}"
            echo "$fmt"
        }
)

# NOTE: Axiom 1) a large shift is a redaction ... should be fine, haha ...
REDACTION_SHIFT=500.0

# Get the prefix and suffix to the injection point (determined by a large shift)
get-prefix-suffix() {
    read quanta
    echo -n '['
    while read first second x plus shift equals x_p rest; do
        # Ignore extremely small shifts
        if [[ "$shift" != *"e"* ]]; then
            if [ "$second" == "CHAR" ]; then
                first=${first/"("/"\\("};
                echo -n ${first/")"/"\\)"}
            elif [ "$second" == "SPACE" ]; then
                echo -n ' '
            elif [ "$second" == "SHIFT" ] || [ "$second" == "TJ" ]; then
                if (( $(echo "($shift / $quanta) > $REDACTION_SHIFT" | bc -l) ));
                then
                    echo ']'
                    shift=$(printf "%.6f" $(echo "-($shift / $quanta)" | bc -l))
                    echo "($shift)"
                    echo -n '['
                else
                    shift=$(printf "%.6f" $(echo "-($shift / $quanta)" | bc -l))
                    echo -n "($shift)"
                fi
            fi
        fi
    done
    echo ']'
}

# Print out the prefix and suffix of the injection and the
# format for the guess depending upon the injection type
injection-format() {
    read pre
    read suf
    echo "$pre"
    echo "$suf"
    printf "$pre\n$suf\n" | create-format-string
}

# Gets the quanta size for a set of bounding boxes
# assuming at least one shift on the line
# TODO: will fail if file does not use shifts should add optional manual config
get-quanta() {
    while read first second x plus shift rest; do
        if [ -z "$quanta" ] && [ "$second" == "SHIFT" ]; then
            quanta=$(echo "$shift / $first" | bc -l)
            quanta="0"${quanta#-}
            echo "$quanta"
        fi
    done
    if [ -z "$quanta" ]; then
        echo 1
    fi
}

# prints the set of redaction points dependent upon finding a large shift
get-redaction() {
    charInd=0
    while read first second x plus shift equals x_p rest; do
        if [ "$second" == "CHAR" ] || [ "$second" == "SPACE" ]; then
            charInd=$(($charInd + 1))
        elif [ "$second" == "SHIFT" ] || [ "$second" == "TJ" ]; then
            if (( $(echo "$shift > $REDACTION_SHIFT" | bc -l) )); then
                echo "$lastX"
                echo "$charInd $x_p"
            fi
        fi
        lastX=$x
    done
}

get-target() {
    while read first second x rest; do
        if [ "$second" == "CHAR" ] || [ "$second" == "SPACE" ]; then
            charCnt=$(($charCnt - 1))
            if [ "$charCnt" -eq "0" ]; then
                echo "$x"
                break
            fi
        fi
    done
}

prior-guess-inject() {
    inc-chr-cnt() {
        noAdj=$(echo "$1" | remove-adjs)
        chr="${noAdj:1:-1}"
        charCnt=$(($charCnt + ${#chr}))
    }

    read -u 3 pre
    inc-chr-cnt "$pre"
    while read g; do
        if [ -z "$g" ]; then
            break
        fi
        read -u 3 suf
        inc-chr-cnt "$suf"
        pre="${pre::-1}""${g:1:-1}""${suf:1}"
    done
    read -u 3 suf
    inc-chr-cnt "$suf"
}

# Because the character spacing adjustments will stack
# with other adjustments, we combine adjustments
accumulate-adjs() (
    while read e; do
        while true; do
            ind=($(echo "$e" | awk '{
        match($0,"([(][-]?([0-9]*[.])?[0-9]+[)]){2}");
                       print RSTART - 1 " " RLENGTH
                       }'))
            if [ "${ind[1]}" == -1 ]; then
                break
            fi

            adjGroup="${e:${ind[0]}:${ind[1]}}"
            newAdj=$(python -c "print(' + '.join([
                                      x.replace(')','').replace('(','')
                                      for x in \"$adjGroup\".split(')(')]
                       ))" | bc -l | awk '{printf "%f", $0}')
            if [ "$newAdj" != "0.000000" ]; then
                e="${e:0:${ind[0]}}""($newAdj)""${e:$((${ind[0]}+${ind[1]}))}"
            else
                e="${e:0:${ind[0]}}""${e:$((${ind[0]}+${ind[1]}))}"
            fi
        done
        echo "$e"
    done
)

target() (
    bbx=$(mktemp)
    red=$(mktemp)
    ypg=$(mktemp)
    presuff=$(mktemp)

    get-bbx "$1" |
        tee >(tail -n2 > $ypg) |
        head -n-2 > $bbx;
    cat $bbx | get-redaction >$red
    quanta=$(cat $bbx | get-quanta)

    head -n1 "$bbx" | cut -d ' ' -f3
    tail -n2 $ypg
    echo $quanta

    # Get character map
    fontn=$(head -n1 "$bbx" | awk -F'font: ' '{print $2}' | awk -F', ' '{print $1}')
    pgnum=$(tail -n1 $ypg)
    "$DIR"/font/cmap "$1" "$fontn" "$pgnum"

    # First we get out the text objects for a line
    textobjs=$(mktemp -u)
    mkfifo "$textobjs"
    exec 3<>"$textobjs"
    rm "$textobjs"
    textobjs=$(mktemp)
    cat <(echo $quanta) $bbx |
        get-prefix-suffix |
        accumulate-adjs |
        grep "\[\|\]" >"$textobjs"
    if [ "$(wc -l $textobjs | cut -d' ' -f1)" == "1" ]; then
        echo "[]" >&3
    fi
    cat "$textobjs" >&3
    rm "$textobjs"
    # optionally add any prior results for guesses (for >1 redaction per line)
    # also increments charCnt to be the number of characters (used for target
    # calculation)
    charCnt=0
    prior-guess-inject

    # Then, finally, we get the format string that we will use to supply guesses
    (echo "$pre"; echo "$suf") | injection-format >"$presuff"

    # Supply the results and use charCnt to get the target
    cat "$presuff"
    cat "$bbx" | get-target

    rm "$ypg" "$bbx" "$red" "$presuff"
    exec 3>&-
)

# This method grabs just the x coordinates before and after the detected
# redaction adjustment, in the case of a fixed and non-ms-word adjustment,
# where only the redacted string is injected
inner-target() {
    read l
    priorRedactions=$(mktemp)
    priorRSize=0
    # These fill in any number of "prior redactions on a line", [guess] format
    # to preserve space character l/r-padding
    while read pg; do
        echo "$pg";
        if [ -z "$pg" ]; then break;
        fi;
        priorRSize=$(($priorRSize + ${#pg} - 2))
    done > "$priorRedactions"

    targInfo=$(mktemp)
    cat <(echo "$l") "$priorRedactions" | target "$1" > "$targInfo"

    # Pull out the x coords immediately before and after the redaction
    bbx=$(mktemp)
    echo "$l" | get-bbx "$1" | head -n-2 > "$bbx"

    # Get injection x coordinate
    fmtStr=$(cat "$targInfo" | tail -n2 | head -n1)
    pre=$(python -c "print(\"$fmtStr\".split('{}')[0])")
    charCnt=$((${#pre} - $priorRSize))
    cat "$bbx" | get-target

    cat "$targInfo" | tail -n+2 | head -n-2

    # target x coordinate
    charCnt=$((${#pre} - $priorRSize + 1))
    cat "$bbx" | get-target

    rm "$bbx" "$targInfo" "$priorRedactions"
}
